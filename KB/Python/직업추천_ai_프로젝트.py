# -*- coding: utf-8 -*-
"""직업추천 AI 프로젝트

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t_GDqCTmtFfmTwyewTDACd4rVhTuhPEB
"""

import matplotlib.pyplot as plt
from matplotlib import rc
import pandas as pd
import numpy as np
import seaborn as sns
from sentence_transformers import SentenceTransformer, util
import torch

df = pd.read_csv('/content/drive/MyDrive/fullstack_ai/data/job_cleardata2.csv', encoding='cp949')
print(df)

from google.colab import drive
drive.mount('/content/drive')

print("Sentence-BERT 모델 로딩 중... 잠시만 기다려 주세요.")
# 사용 가능한 유효한 한국어 모델 이름을 사용합니다.
embedding_model = SentenceTransformer('jhgan/ko-sroberta-multitask')
print("모델 로딩 완료!")

# NCS 직업군 설명 임베딩 (한 번만 수행)
job_descriptions = df['세분류(1,114)'].tolist()
job_embeddings = embedding_model.encode(job_descriptions, convert_to_tensor=True)

def recommend_jobs():
    print("\n=== NCS 직업군 추천 시스템 ===")
    # 이름, 나이, 성별은 추천 로직에 직접 사용되지는 않지만 사용자에게 친근하게 다가가기 위해 입력받습니다.
    name = input("이름을 입력하세요: ").strip()
    age = input("나이를 입력하세요: ").strip()
    gender = input("성별을 입력하세요 (남/여): ").strip()
    skills = input("Q1. 당신이 목표로 하고있는 직업군 분야를 작성해주세요. : ").strip()
    skills2 = input("Q2. 해당 목표를 위해 실행했던 활동(공모전 참여)이나 실적(자격증 보유 여부 등)이 있나요?  ").strip()
    skills3 = input("Q3. 직군을 목표로 하는 이유가 있다면 말씀해주세요. ").strip()

    if not skills: # 기술/경험 입력은 필수
        print("당신이 목표로 하고있는 직업군 분야를 추천이 가능합니다.")
        return

    if not skills2: # 기술/경험 입력은 필수
        print("해당 목표를 위해 실행했던 활동(공모전 참여)이나 실적(자격증 보유 여부 등) 정보를 입력해야 추천이 가능합니다.")
        return

    if not skills3: # 기술/경험 입력은 필수
        print("직군을 목표로 하는 이유를 입력해야 추천이 가능합니다.")
        return

    # 입력 정보를 하나의 텍스트로 결합 (임베딩 모델 입력으로 사용)
    # 이름, 나이, 성별 정보를 포함하면 모델이 불필요한 정보를 학습할 수 있으므로, 여기서는 기술 및 경험에 집중합니다.
    user_profile_text = f"{skills} {skills2} {skills3}"

    print(f"\n입력된 기술 및 경험: {user_profile_text}")
    print("추천 직업군을 분석 중입니다...")

    # 사용자 프로필 임베딩
    user_embedding = embedding_model.encode(user_profile_text, convert_to_tensor=True)

    # NCS 직업군 임베딩과의 코사인 유사도 계산
    cosine_scores = util.cos_sim(user_embedding, job_embeddings)[0]

    # 결과 DataFrame 생성 및 정렬
    recommendation_df = pd.DataFrame({
        'job_name': df['직업명'],
        'description': df['세분류(1,114)'],
        'similarity_score': cosine_scores.cpu().numpy()
    })
    recommendation_df = recommendation_df.sort_values(by='similarity_score', ascending=False).reset_index(drop=True)

    # 추천 결과 출력
    print("\n=== 당신을 위한 추천 NCS 직업군 Top 5 ===")
    for idx, row in recommendation_df.head(5).iterrows():
        print(f"\n{idx+1}. 직업명: {row['job_name']}")
        print(f"   유사도: {row['similarity_score']:.4f}")
        print(f"   직업분류: {row['description'][:150]}") # 내용이 길 경우 일부만 출력

    # 사용자에게 다음 단계를 제안
    print("\n추천 결과가 만족스러우신가요? 추가로 궁금한 점이 있거나 다른 시도를 해보고 싶으시다면 알려주세요.")

if __name__ == "__main__":
    recommend_jobs()